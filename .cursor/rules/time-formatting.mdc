---
alwaysApply: true
description: Time formatting standards for Marqness applications
---

# Time Formatting Standards

## üïê Global Time Format Rules

### Always Use 24-Hour Format
- **NEVER use AM/PM format** - Always use 24-hour format (00:00 - 23:59)
- **Set `hour12: false`** in all `toLocaleString()` and `toLocaleTimeString()` calls
- **Examples**: "14:30" not "2:30 PM", "09:15" not "9:15 AM"

```typescript
// ‚úÖ CORRECT - 24-hour format
date.toLocaleString(undefined, {
  year: 'numeric',
  month: 'short', 
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit',
  hour12: false, // ALWAYS include this
});

// ‚ùå WRONG - AM/PM format
date.toLocaleString(undefined, {
  hour: '2-digit',
  minute: '2-digit',
  // Missing hour12: false
});
```

### Never Show Seconds in UI
- **Remove seconds** from all user-facing time displays
- **Duration format**: Use "1h 30m" not "1h 30m 45s"
- **Timestamps**: Use "Jul 30, 2025, 14:30" not "Jul 30, 2025, 14:30:45"
- **Time ranges**: Use "14:30 - 16:15" not "14:30:00 - 16:15:30"

```typescript
// ‚úÖ CORRECT - No seconds in duration
export function formatDuration(totalSeconds: number): string {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  
  if (hours > 0) return `${hours}h ${minutes}m`;
  if (minutes > 0) return `${minutes}m`;
  return '1m'; // Round up sub-minute durations
}

// ‚ùå WRONG - Shows seconds
return `${hours}h ${minutes}m ${seconds}s`;
```

## üìç Standard Formatting Functions

Use the functions from [dateUtils.ts](mdc:src/lib/dateUtils.ts):

- **`formatDateTimeRounded()`** - Full date/time, 24-hour, rounded to minute
- **`formatTimeRounded()`** - Time only, 24-hour, rounded to minute  
- **`formatTimeRangeRounded()`** - Time range, 24-hour, rounded to minute
- **`formatDuration()`** - Duration in "Xh Ym" format (no seconds)

## üéØ Application Areas

### Hobby Tracker
- Activity timestamps: Show start time, not creation time
- Duration displays: Use formatDuration() for elapsed time
- Time ranges: Use formatTimeRangeRounded() for start-end times

### Expense Tracker (Future)
- Transaction timestamps: Use 24-hour format
- Date ranges: Consistent with hobby tracker formatting
- Export formats: Match CSV and UI formatting

### Shared Components  
- Authentication flows: Use consistent time formatting
- Landing page: Apply same standards if showing time
- Any shared time displays: Follow these rules

## ‚ö†Ô∏è Common Mistakes to Avoid

1. **‚ùå Using AM/PM format** - Always use 24-hour format
2. **‚ùå Showing seconds** - Keep UI clean with minute precision only
3. **‚ùå Inconsistent rounding** - Always round to nearest minute, not truncate
4. **‚ùå Mixed formats** - Don't mix 12-hour and 24-hour in same app
5. **‚ùå Different duration formats** - Always use "Xh Ym" format

## üîß Implementation Checklist

When working with time displays:
- [ ] Set `hour12: false` in all time formatting
- [ ] Use rounded functions for UI display
- [ ] Remove seconds from duration calculations
- [ ] Test time display across different locales
- [ ] Ensure consistency between components
- [ ] Update CSV exports to match UI formatting

## üìù Examples

### ‚úÖ CORRECT Examples
```typescript
// Timestamps
"Jul 30, 2025, 14:30"     // Not "Jul 30, 2025, 2:30 PM"
"15:45"                   // Not "3:45 PM"

// Durations  
"2h 15m"                  // Not "2h 15m 30s"
"45m"                     // Not "45m 12s"
"1m"                      // Not "0m 30s" (round up)

// Time ranges
"09:00 - 17:30"          // Not "9:00 AM - 5:30 PM"
```

### ‚ùå WRONG Examples
```typescript
// Don't use these formats
"2:30 PM"                // Use "14:30"
"1h 30m 45s"            // Use "1h 30m" 
"9:00 AM - 5:30 PM"     // Use "09:00 - 17:30"
```

Remember: **Consistency across all apps is key for professional user experience!**
